#
# This file is based on several ideas from various people
# Thanks to all those that helped with providing info
# here and there to get this file sorted for me
#
# TODO:
# Fix: mercurial - dirty pages
# Fix: mercurial - count remote changes
# Fix: svn - count remote changes (seems slow)
# Fix: git - dirty pages
# FIX: git - auto get (git fetch) but seems slow
# FIX: code cleanup 1 o 1
#
source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash
source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-prompt.sh

DEFAULT="[37;40m"
PINK="[35;40m"
GREEN="[32;40m"
ORANGE="[33;40m"
CYAN="[36;40m"

# Detect if current directory is a git repository
function is_git_repository {
  git branch > /dev/null 2>&1
}
 
# Detect if current directory is a subversion repository
function is_svn_repository {
  test -d .svn
}

# Detect if the current directory is a mercurial repository
function is_mercurial_repository {
  hg branch > /dev/null 2>&1
}
 
# Determine the branch/state information for this git repository.
function set_git_branch {
  # Get remote changes and set value if there are remote changes
  # Works on github at least
  #
  # Get branch
  git_branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/")
  
  # Get remote info
  git_remote=$(git remote show)

  # Get changes from remote site
  # This however might need a git fetch to be ran to get the updates shown
  get_remote_to_pull=$(git rev-list HEAD..$git_remote/$git_branch --count)

  # Get local changes and compare to remote site
  get_local_to_push=$(git rev-list $git_remote/$git_branch..HEAD --count)

  # Get uncommited changes from local archive
  get_uncommited_changes=$(git status -s | awk '{print $1}' | egrep -c "^[MARCD]")

  # Compare and set prompt with statuses
  # Get number of updates from remote git (up:number)
  if [[ ${get_remote_to_pull} > 0 ]]; then
    pullstatus=$(printf "\033[37;0mup:\033[32;40m$get_remote_to_pull\033[37;0m ")
  else
    pullstatus=""
  fi
  # Get number of local changes that is not pushed to git (pu:number)
  if [[ ${get_local_to_push} > 0 ]]; then
    pushstatus=$(printf "\033[37;0mpu:\033[35;40m$get_local_to_push\033[37;0m ")
  else
    pushstatus=""
  fi
  # Get number of local uncommited changes (uc:number)
  if [[ ${get_uncommited_changes} > 0 ]]; then
    commitstatus=$(printf "\033[37;0muc:\033[35;40m$get_uncommited_changes\033[37;0m ")
  else
    commitstatus=""
  fi
  
  # Get the name of the branch.
  branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/" | awk '{ printf "\033[37;0mon \033[35;40m" $1 }')

  # Set prompt without statuses of changes etc
  #BRANCH="${branch}"

  # Set prompt with statuses of changes etc
  BRANCH="${branch} ${pullstatus}${pushstatus}${commitstatus}"
}
 
# Determine the branch information for this subversion repository. No support
# for svn status, since that needs to hit the remote repository.
function set_svn_branch {
  # Capture the output of the "svn info" command.
  svn_info="$(svn info | egrep '^URL: ' 2> /dev/null)"
 
  # Get the name of the branch.
  branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
  trunk_pattern="^URL: .*/trunk(/.*)?$"
  if [[ ${svn_info} =~ $branch_pattern ]]; then
    branch=${BASH_REMATCH[2]}
  elif [[ ${svn_info} =~ $trunk_pattern ]]; then
    branch=$(printf "\033[37;0mon \033[35;40mtrunk")
  fi

  # Get local changes and compare to svn branch
  get_local_changes=$(svn st | egrep -c "^[\?MACD]")

  # Compare and set prompt with status
  # Fetch local changes that is not commited (uc:number)
  if [[ ${get_local_changes} > 0 ]]; then
    commitstatus=$(printf "\033[37;0muc:\033[35;40m$get_local_changes\033[37;0m ")
  else
    commitstatus=""
  fi
  
  # Set prompt without statuses of changes etc
  #BRANCH="${branch}"

  # Set prompt with statuses of changes etc
  BRANCH="${branch} ${commitstatus}"
}

# Get the mercurial branch
function set_mercurial_branch {
  branch="$(hg branch 2> /dev/null | awk '{ printf "\033[37;0mon \033[35;40m" $1}')"

  # Get number of local changes
  get_local_changes=$(hg status | egrep -c "^[\?\!MARC]")

  # Compare local changes with remote server and set status
  if [[ ${get_local_changes} > 0 ]]; then
    commitstatus=$(printf "\033[37;0muc:\033[35;40m$get_local_changes\033[37;0m ")
  else
    commitstatus=""
  fi

  # Set prompt without statuses of changes etc
  #BRANCH="${branch}"

  # Set prompt with statuses of changes etc
  BRANCH="${branch} ${commitstatus}"
}
 
# Set the full bash prompt.
function set_bash_prompt () {
  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  elif is_svn_repository ; then
    set_svn_branch
  elif is_mercurial_repository ; then
    set_mercurial_branch
  else
    BRANCH=''
  fi

  if [ ! -z "$VIRTUAL_ENV" ]; then
      if [ "`basename \"$VIRTUAL_ENV\"`" = "__" ] ; then
          VIRTENV="[`basename \`dirname \"$VIRTUAL_ENV\"\``]"
      else
          VIRTENV="(`basename \"$VIRTUAL_ENV\"`)"
      fi
  else
      VIRTENV=""
  fi

  # Set the bash prompt variable.
  if [[ ${EUID} == 0 ]] ; then
    PS1='\n\e${CYAN}\u \e${DEFAULT}at \e${ORANGE}\h \e${DEFAULT}in \e${GREEN}\w \e${BRANCH} \e${DEFAULT}\n${VIRTENV}$ '
  else
    PS1='\n\e${CYAN}\u \e${DEFAULT}at \e${ORANGE}\h \e${DEFAULT}in \e${GREEN}\w \e${BRANCH} \e${DEFAULT}\n${VIRTENV}$ '
  fi
}

# Tell bash to execute this function just before displaying the prompt
PROMPT_COMMAND=set_bash_prompt
